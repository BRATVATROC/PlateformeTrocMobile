



/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */

/*  
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;
import com.codename1.charts.util.ColorUtil;
import com.codename1.components.ImageViewer;
import com.codename1.components.SpanLabel;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.NetworkEvent;
import com.codename1.ui.Button;
import com.codename1.ui.Component;
import com.codename1.ui.Container;
import com.codename1.ui.InfiniteContainer;
import com.codename1.ui.List;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.list.MultiList;
import com.codename1.ui.table.DefaultTableModel;
import com.codename1.ui.table.Table;
import com.codename1.ui.table.TableModel;
import com.codename1.ui.util.UIBuilder;
import Entite.Commande;
import Service.CommandeService;
import java.util.ArrayList;
import com.codename1.ui.Form;

/**
 *
 * @author Hussam
 */
public class AffichageCom {
     private Form form;
    private Resources theme;
    
    CommandeService ser = new CommandeService();
    ArrayList<Commande> event = new ArrayList<>();

    public AffichageCom() {
        form = new Form("Orders", BoxLayout.y());
        Container list = new InfiniteContainer() {
            @Override
            public Component[] fetchComponents(int index, int amount) {
                if (index == 0) {
                    event = ser.getList2();
                }
                if (index + amount > event.size()) {
                    amount = event.size() - index;
                }
                if (amount <= 0) {
                    return null;
                }
                Component[] elements = new Component[amount];

                int i = 0;

                for (Commande p : event) {

                    if (p.getIdAnnonce1() != 0) {
                        
                        
                        
                        Container element = new Container(BoxLayout.y());
                        Container line1 = new Container(BoxLayout.x());
                        Container line2 = new Container(BoxLayout.x());
                        Label typeLabel = new Label("Exchange");
                        line1.add(typeLabel);
                        if (String.valueOf(p.getLivraison()).equals("0")) {
                            Label deliveryLabel = new Label("Delivery Not Asked");
                            line1.add(deliveryLabel);
                        } else {
                            Label deliveryLabel = new Label("Delivery Asked");
                            line1.add(deliveryLabel);
                        }
                        
                        Label idA1Label = new Label(Integer.toString(p.getIdAnnonce1()));
                        Label idA2Label = new Label(Integer.toString(p.getIdAnnonce2()));
                        
                        line1.add(idA1Label);
                        line1.add(idA2Label);
                        element.add(line1);

                        Button b = new Button();
                        b.addActionListener(new ActionListener() {
                            @Override
                            public void actionPerformed(ActionEvent evt) {
                                Dialog.show("Info", p.getNom() + " has " + p.getNumCommande() + " years", "OK", "");
                            }
                        });
                        element.setLeadComponent(b);
                        elements[i] = element;

                        i++;
                    } else {
                        
                        Container element = new Container(BoxLayout.y());
                        Container line1 = new Container(BoxLayout.x());
                        Container line2 = new Container(BoxLayout.x());
                        Label typeLabel = new Label("Sale");
                        line1.add(typeLabel);
                        if (String.valueOf(p.getLivraison()).equals("0")) {
                            Label deliveryLabel = new Label("Delivery Not Asked");
                            line1.add(deliveryLabel);
                        } else {
                            Label deliveryLabel = new Label("Delivery Asked");
                            line1.add(deliveryLabel);
                        }
                        
                        if (String.valueOf(p.getPaye()).equals("0")) {
                            Label deliveryLabel = new Label("Not Payed");
                            line1.add(deliveryLabel);
                        } else {
                            Label deliveryLabel = new Label("Payed");
                            line1.add(deliveryLabel);
                        }
                        
                        Label idA1Label = new Label(Double.toString(p.getMontant())+" DT");
                        
                        line1.add(idA1Label);
                        element.add(line1);

                        Button b = new Button();
                        b.addActionListener(new ActionListener() {
                            @Override
                            public void actionPerformed(ActionEvent evt) {
                                Dialog.show("Info", p.getNom() + " has " + p.getNumCommande() + " years", "OK", "");
                            }
                        });
                        element.setLeadComponent(b);
                        elements[i] = element;

                        i++;
                    }
                }
                return elements;
            }
        };
        list.setScrollableY(false);
        form.add(list);
        form.show();
    }

    
    public Form getF() {
        return form;
    }

    public void setF(Form f) {
        this.form = f;
    }
    
}
